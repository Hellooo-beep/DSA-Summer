public class ArrayQueue {
	private int[] arr;
	private int first;
	private int last;
	private int size;
	private int capacity;
	
	public ArrayQueue (int capacity) {
		this.capacity = capacity;
		arr = new int[capacity];
		first = 0;
		last = -1;
		size = 0;
	}
	
	public void enqueue(int item) {
		if (isFull()) {
			throw new IllegalStateException("Queue is full!");
		}
		last = (last +1) % capacity;
		arr[last] = item;
		size++;
	}
	
	public int dequeue() {
		if (isEmpty()) {
			throw new IllegalStateException("Queue is empty!");
			
		}
		int item = arr[first];
		first = (first + 1) % capacity;
		size--;
		return item;
	}
	
	public int peek() {
		if (isEmpty()) {
			throw new IllegalStateException("Queue is empty!");
		}
		return arr[first];
	}
	
	public boolean isFull() {
		return size == capacity;
	}
	
	public boolean isEmpty() {
		return size == 0;
		
	}
	public int size() {
		return size;
	}
}
